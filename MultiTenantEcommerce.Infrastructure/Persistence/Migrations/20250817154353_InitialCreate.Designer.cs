// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MultiTenantEcommerce.Infrastructure.Persistence.Context;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MultiTenantEcommerce.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250817154353_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MultiTenantEcommerce.Domain.Entities.Category", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("TenantId", "Id");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("IX_Category_TenantId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("MultiTenantEcommerce.Domain.Entities.Customer", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("TenantId", "Id");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("IX_Customer_TenantId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("MultiTenantEcommerce.Domain.Entities.Employee", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("TenantId", "Id");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("IX_Employee_TenantId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("MultiTenantEcommerce.Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("PayedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("TenantId", "Id");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("IX_Order_TenantId");

                    b.HasIndex("TenantId", "CustomerId")
                        .HasDatabaseName("IX_Order_TenantId_CustomerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("MultiTenantEcommerce.Domain.Entities.OrderItem", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("OrderTenantId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("TenantId", "OrderId", "ProductId");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("IX_OrderItem_TenantId");

                    b.HasIndex("OrderTenantId", "OrderId");

                    b.HasIndex("TenantId", "OrderId")
                        .HasDatabaseName("IX_OrderItem_TenantId_OrderId");

                    b.HasIndex("TenantId", "ProductId")
                        .HasDatabaseName("IX_OrderItem_TenantId_ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("MultiTenantEcommerce.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SKU")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("TenantId", "Id");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("IX_Product_TenantId");

                    b.HasIndex("TenantId", "CategoryId")
                        .HasDatabaseName("IX_Product_TenantId_CategoryId");

                    b.HasIndex("TenantId", "Name")
                        .HasDatabaseName("IX_Product_TenantId_ProductName");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("MultiTenantEcommerce.Domain.Entities.Stock", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MinimumQuantity")
                        .HasColumnType("integer");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<int>("Reserved")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("TenantId", "Id");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("IX_Stock_TenantId");

                    b.HasIndex("TenantId", "ProductId")
                        .IsUnique()
                        .HasDatabaseName("IX_Stock_TenantId_ProductId");

                    b.ToTable("Stocks");
                });

            modelBuilder.Entity("MultiTenantEcommerce.Domain.Entities.StockMovement", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("OtherReason")
                        .HasColumnType("text");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("TenantId", "Id");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("IX_StockMovement_TenantId");

                    b.HasIndex("TenantId", "ProductId")
                        .HasDatabaseName("IX_StockMovement_TenantId_ProductId");

                    b.ToTable("StockMovements");
                });

            modelBuilder.Entity("MultiTenantEcommerce.Domain.Entities.Tenant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Tenants");
                });

            modelBuilder.Entity("MultiTenantEcommerce.Domain.Entities.Category", b =>
                {
                    b.HasOne("MultiTenantEcommerce.Domain.Entities.Tenant", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MultiTenantEcommerce.Domain.Entities.Customer", b =>
                {
                    b.HasOne("MultiTenantEcommerce.Domain.Entities.Tenant", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("MultiTenantEcommerce.Domain.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("CustomerTenantId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("CustomerId")
                                .HasColumnType("uuid");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("City");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Country");

                            b1.Property<string>("HouseNumber")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("HouseNumber");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("PostalCode");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Street");

                            b1.HasKey("CustomerTenantId", "CustomerId");

                            b1.ToTable("Customers");

                            b1.WithOwner()
                                .HasForeignKey("CustomerTenantId", "CustomerId");
                        });

                    b.OwnsOne("MultiTenantEcommerce.Domain.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("CustomerTenantId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("CustomerId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Email");

                            b1.HasKey("CustomerTenantId", "CustomerId");

                            b1.ToTable("Customers");

                            b1.WithOwner()
                                .HasForeignKey("CustomerTenantId", "CustomerId");
                        });

                    b.OwnsOne("MultiTenantEcommerce.Domain.ValueObjects.Password", "Password", b1 =>
                        {
                            b1.Property<Guid>("CustomerTenantId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("CustomerId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Password");

                            b1.HasKey("CustomerTenantId", "CustomerId");

                            b1.ToTable("Customers");

                            b1.WithOwner()
                                .HasForeignKey("CustomerTenantId", "CustomerId");
                        });

                    b.OwnsOne("MultiTenantEcommerce.Domain.ValueObjects.PhoneNumber", "PhoneNumber", b1 =>
                        {
                            b1.Property<Guid>("CustomerTenantId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("CustomerId")
                                .HasColumnType("uuid");

                            b1.Property<string>("CountryCode")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("PhoneNumber_CountryCode");

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("PhoneNumber_Number");

                            b1.HasKey("CustomerTenantId", "CustomerId");

                            b1.ToTable("Customers");

                            b1.WithOwner()
                                .HasForeignKey("CustomerTenantId", "CustomerId");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("Password")
                        .IsRequired();

                    b.Navigation("PhoneNumber")
                        .IsRequired();
                });

            modelBuilder.Entity("MultiTenantEcommerce.Domain.Entities.Employee", b =>
                {
                    b.HasOne("MultiTenantEcommerce.Domain.Entities.Tenant", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("MultiTenantEcommerce.Domain.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("EmployeeTenantId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("EmployeeId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Email");

                            b1.HasKey("EmployeeTenantId", "EmployeeId");

                            b1.ToTable("Employees");

                            b1.WithOwner()
                                .HasForeignKey("EmployeeTenantId", "EmployeeId");
                        });

                    b.OwnsOne("MultiTenantEcommerce.Domain.ValueObjects.Password", "Password", b1 =>
                        {
                            b1.Property<Guid>("EmployeeTenantId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("EmployeeId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Password");

                            b1.HasKey("EmployeeTenantId", "EmployeeId");

                            b1.ToTable("Employees");

                            b1.WithOwner()
                                .HasForeignKey("EmployeeTenantId", "EmployeeId");
                        });

                    b.OwnsOne("MultiTenantEcommerce.Domain.ValueObjects.Role", "Role", b1 =>
                        {
                            b1.Property<Guid>("EmployeeTenantId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("EmployeeId")
                                .HasColumnType("uuid");

                            b1.Property<string>("roleName")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Role");

                            b1.HasKey("EmployeeTenantId", "EmployeeId");

                            b1.ToTable("Employees");

                            b1.WithOwner()
                                .HasForeignKey("EmployeeTenantId", "EmployeeId");
                        });

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("Password")
                        .IsRequired();

                    b.Navigation("Role")
                        .IsRequired();
                });

            modelBuilder.Entity("MultiTenantEcommerce.Domain.Entities.Order", b =>
                {
                    b.HasOne("MultiTenantEcommerce.Domain.Entities.Tenant", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MultiTenantEcommerce.Domain.Entities.Customer", null)
                        .WithMany()
                        .HasForeignKey("TenantId", "CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("MultiTenantEcommerce.Domain.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("OrderTenantId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("OrderId")
                                .HasColumnType("uuid");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("City");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Country");

                            b1.Property<string>("HouseNumber")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("HouseNumber");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("PostalCode");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Street");

                            b1.HasKey("OrderTenantId", "OrderId");

                            b1.ToTable("Orders");

                            b1.WithOwner()
                                .HasForeignKey("OrderTenantId", "OrderId");
                        });

                    b.Navigation("Address")
                        .IsRequired();
                });

            modelBuilder.Entity("MultiTenantEcommerce.Domain.Entities.OrderItem", b =>
                {
                    b.HasOne("MultiTenantEcommerce.Domain.Entities.Order", null)
                        .WithMany("Items")
                        .HasForeignKey("OrderTenantId", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MultiTenantEcommerce.Domain.Entities.Order", null)
                        .WithMany()
                        .HasForeignKey("TenantId", "OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MultiTenantEcommerce.Domain.Entities.Product", null)
                        .WithMany()
                        .HasForeignKey("TenantId", "ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("MultiTenantEcommerce.Domain.ValueObjects.Money", "UnitPrice", b1 =>
                        {
                            b1.Property<Guid>("OrderItemTenantId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("OrderItemOrderId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("OrderItemProductId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Value")
                                .HasColumnType("numeric")
                                .HasColumnName("UnitPrice");

                            b1.HasKey("OrderItemTenantId", "OrderItemOrderId", "OrderItemProductId");

                            b1.ToTable("OrderItems");

                            b1.WithOwner()
                                .HasForeignKey("OrderItemTenantId", "OrderItemOrderId", "OrderItemProductId");
                        });

                    b.Navigation("UnitPrice")
                        .IsRequired();
                });

            modelBuilder.Entity("MultiTenantEcommerce.Domain.Entities.Product", b =>
                {
                    b.HasOne("MultiTenantEcommerce.Domain.Entities.Tenant", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MultiTenantEcommerce.Domain.Entities.Category", null)
                        .WithMany()
                        .HasForeignKey("TenantId", "CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("MultiTenantEcommerce.Domain.ValueObjects.Money", "Price", b1 =>
                        {
                            b1.Property<Guid>("ProductTenantId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("ProductId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Value")
                                .HasColumnType("numeric")
                                .HasColumnName("Price");

                            b1.HasKey("ProductTenantId", "ProductId");

                            b1.ToTable("Products");

                            b1.WithOwner()
                                .HasForeignKey("ProductTenantId", "ProductId");
                        });

                    b.Navigation("Price")
                        .IsRequired();
                });

            modelBuilder.Entity("MultiTenantEcommerce.Domain.Entities.Stock", b =>
                {
                    b.HasOne("MultiTenantEcommerce.Domain.Entities.Product", null)
                        .WithOne()
                        .HasForeignKey("MultiTenantEcommerce.Domain.Entities.Stock", "TenantId", "ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MultiTenantEcommerce.Domain.Entities.StockMovement", b =>
                {
                    b.HasOne("MultiTenantEcommerce.Domain.Entities.Product", null)
                        .WithMany()
                        .HasForeignKey("TenantId", "ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MultiTenantEcommerce.Domain.Entities.Order", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
